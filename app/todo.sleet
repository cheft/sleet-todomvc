item
    li(class='{completed: todo.completed, editing: editing} todo')
        .view
            input.toggle(type='checkbox' checked='{todo.completed}' onclick='{toggleTodo}')
            label(ondblclick='{toEdit}') {todo.title}
            button.destroy(onclick='{toRemove}')
        input.edit(name='editor' onblur='{didEdit}' onkeyup='{didEdit}')
    |.
        todoTag = @parent.parent
        @todo = @parent.t
        @toEdit = (e) =>
            @editing = true
            @editor.value = @todo.title
        @didEdit = (e) =>
            if e.which is 13 or e.which is 0 
                @editing = false
                @todo.title = value.trim() if (value = e.target.value)
                todoTag.trigger 'save'
        @toRemove = => todoTag.trigger 'remove', @todo
        @toggleTodo = =>
            @todo.completed = !@todo.completed
            todoTag.trigger 'save'
            true
        @on 'update', =>  @editor.focus() if @editing
todo
    section#todoapp
        header#header
            h1 todos
            input#new-todo(autofocus autocomplete='off' placeholder='What needs to be done?' onkeyup='{didAdd}')
        section#main(if='{todos.length}')
            input#toggle-all(type='checkbox' checked='{allDone}' onclick='{toggleAll}')
            ul#todo-list: item(each='{t, i in filtered()}')
        footer#footer(if='{todos.length}')
            span#todo-count
                strong {remaining}
                |.
                    {remaining > 1 ? 'items' : 'item'} left
            ul#filters: li(each='{v in links}'): a(class='{selected: parent.activeFilter == v.name}' href='#/{v.name}') {v.label}
            button#clear-completed(onclick='{removeCompleted}' if='{todos.length > remaining}') Clear completed
    footer#info
        p Double-click to edit a todo
        p Written by
            a(href='http://github.com/cheft') Cheft
        p Part of
            a(href='http://todomvc.com') TodoMVC
    |.
        store = new Store 'sleet-todo'
        @todos = store.fetch()
        @links = [{label: 'All', name: 'all'}, {label: 'Active', name: 'active'}, {label: 'Completed', name: 'completed'}]
        @didAdd = (e) =>
            if e.which is 13 and (value = e.target.value)
                @todos.push title: value.trim(), completed: false
                e.target.value = ''
                @trigger 'save'
        @filtered = =>
            return @todos if @activeFilter is 'all'
            @todos.filter (t) => t.completed is (if @activeFilter is 'active' then false else true)         
        @toggleAll = (e) =>
            @todos.forEach (t) => t.completed = e.target.checked
            @trigger 'save'
            true
        @removeCompleted = (e) =>
            @todos = @todos.filter (t) -> !t.completed
            @trigger 'save'
        @on 'remove', (todo) => @todos.forEach (t) =>
            @todos.splice(@todos.indexOf(t), 1) if todo is t
            @trigger 'save'
        @on 'save', =>
            store.save @todos
            @update()
        @on 'update', =>
            @remaining = (@todos.filter (t) -> !t.completed).length
            @allDone = @remaining is 0
        riot.route.exec (base, filter) => @activeFilter = filter || 'all'
        riot.route (base, filter) =>
            @activeFilter = filter
            @update()
        
